README for OpenSupports Deployment using Terraform and Jenkins
OpenSupports Deployment Project
This project provisions infrastructure and deploys the OpenSupports application, an open-source ticketing system, using Terraform for infrastructure as code and Jenkins for CI/CD pipeline automation.

The project includes security best practices, cost optimizations, and uses AWS services like EC2, RDS, S3, and IAM.

Table of Contents
Project Structure
Prerequisites
Infrastructure Components

Setup Instructions
Step 1: Clone Repository
Step 2: Configure Terraform
Step 3: Apply Terraform
Step 4: Configure Jenkins Pipeline

Best Practices Implemented
Cost Optimization Recommendations
How to Promote Application Across Environments
Project Structure
opensupports/
├── terraform/
│   ├── main.tf        # Terraform configuration for infrastructure
│   ├── variables.tf   # Parameterized variables
│   ├── outputs.tf     # Outputs from Terraform resources
├── Jenkinsfile        # Jenkins pipeline configuration
├── README.syed          # Project documentation
Prerequisites
AWS CLI installed and configured with access keys and a default region.
Terraform installed on the machine.
Jenkins installed and running on an EC2 instance or a local machine.
An AWS account with sufficient permissions to create resources (EC2, S3, RDS, IAM, etc.).
SSH Key Pair for accessing EC2 instances.
Infrastructure Components
VPC: Configured with public and private subnets across availability zones.
EC2 Instances: Hosts the OpenSupports application with IAM roles for restricted access.
RDS (MySQL): Stores the application database with encryption at rest.
S3: Manages static file storage with versioning and encryption enabled.
IAM Roles: Ensures least privilege access for EC2 and other AWS services.
CloudWatch: Logs and monitors infrastructure for performance and issues.
Setup Instructions
Step 1: Clone Repository
git clone https://github.com/syedAWS123UK/opensupports.git
cd opensupports

Step 2: Configure Terraform
Navigate to the terraform subdirectory:
cd terraform
terraform init
Update the following placeholders in main.tf:
opensupports:  S3 bucket name.
ami-0866a3c8686eaeeba: Valid AMI
opensupportkeypair: SSH key pair name.
terraform plan -var="key=value"

Step 3: Apply Terraform
Run the following command to create the infrastructure:
terraform apply

Step 4: Configure Jenkins Pipeline
Access Jenkins using the 18.206.223.137:8080 Jenkins EC2 instance.

Install required plugins:
Git
Terraform
Pipeline: AWS Steps

Create a new pipeline job and use the Jenkinsfile from the repository.
Update credentials and repository URLs in the pipeline as needed.
Trigger the pipeline to deploy the OpenSupports application.

IAM Roles with Least Privilege:
The EC2 instances use an IAM role with restricted permissions to access only required S3 and RDS resources.

Encryption:
S3 buckets and RDS instances are encrypted to protect data at rest.
Versioning:
S3 bucket versioning is enabled to track and preserve file versions.
Isolation of Environments:
Separate infrastructure is provisioned for development, staging, and production environments.
Cost Optimization Recommendations
Use Auto Scaling Groups:
Configure Auto Scaling Groups for EC2 instances to adjust capacity based on demand.
Use Spot Instances:
For non-production environments, consider Spot Instances to reduce costs.
Enable RDS Read Replicas:
Offload read-heavy operations from the primary RDS instance.
How to Promote Application Across Environments
Development:
Deploy the application to the development environment first and test its functionality.
Staging:
Once validated, promote the application to staging using the Jenkins pipeline.
Production:
After successful testing in staging, promote the application to production.
